character drivers - write drivers for byte-oriented operations

Example: serial drivers, audio drivers, video drivers, camera drivers, and basic I/O drivers

Appp to h/w communication:

	App 
	Device file/node --> Mjaor & minor.no. --> Device Driver
	Hardware 
	
	
	Application will open the device file.
	device file is created by the device driver
	device file will find the corresponding device driver using major and minor numbers
	Device driver will talk to the Hardware device.
	
Major number :	identifies the driver associated with the device
				number can also be shared by multiple device drivers.
				Eg:
				 /proc/devices - lists char and block devices 
				4 /dev/vc/0
				4 tty
				4 ttyS
				5 /dev/tty
				5 /dev/console
				5 /dev/ptmx
				5 ttyprintk

				 
Minor number :	minor number is to distinguish individual physical or logical devices as devices shares same major number.

dev_t -	used to hold device numbers(major, minor)
		32-bit quantity 
		12 bits for the major number and 20 for the minor number.
		
create the dev_t structure variable :
	MKDEV(int major,int minor);
	
get your major number and minor number from dev_t :
	MAJOR(dev_t dev);
	MINOR(dev_t dev);
	
passing dev_t structure to this MAJOR or MINOR function will return that major/minor number of your driver.

Allocating Major and Minor Number : 

	Statically : 
	Syntax:	int register_chrdev_region(dev_t first,unsigned int count, char *name);
			0 - success
			ERROR - negative error code 
		first - beginning device number of the range you would like to allocate.
		count - total number of contiguous device numbers you are requesting
		name  - name of the device
		
	Dynamically :
	Syntax:	int alloc_chrdev_region(dev_t *dev, unsigned int firstminor, unsigned int count, char *name);
	
	dev - an output-only parameter that will, on successful completion, hold the first number in your allocated range.
	firstminor - should be the requested first minor number to use; it is usually 0.


Difference between static and dynamic method : 

	static 																Dynamic
you know in advance which major.no. you want to start with		dynamically allocate the device numbers for you(avoids conflict)
telling kernel that,the start major/minor number & count		you are telling the kernel that how many device numbers you need
it either gives them to you or not 								the starting minor number and count
(depending on availability).									it will find a starting major number for you, if one is available
																avoid conflict with other device drivers



The disadvantage of dynamic assignment is that you canâ€™t create the device nodes in advance, because the major number assigned to your module will vary. For normal use of the driver, this is hardly a problem, because once the number has been assigned, you can read it from /proc/devices.



Unregister the Major and Minor Number : 
	Syntax :	void unregister_chrdev_region(dev_t first,unsigned int count);
	
	
	
before unregister check /dev --> cannot find device file 
